@page "/CreatePost"
@using System.Security.Claims
@using global::Shared.Dtos
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using System.Security.AccessControl
@inject NavigationManager navMgr;
@inject IPostService postService;
@inject IUserService userService;
@attribute [Authorize]

<div class="card">
    <h3>Create a post</h3>
    <div class="form-group field">
        <label>Title:</label><br/>
        <input type="text" rows="8" @bind="postTitle" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Content:</label><br/>
        <textarea rows="8" cols="50" @bind="postBody" @bind:event="oninput"/> 
    </div>
    
        <button @onclick="Create" class="createBtn">Create</button>
    
    <div>
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
    </div>
</div>


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private string postTitle;
    private string postBody;
    private string owner;
    private string msg;
    
    private bool isLoggedIn;
    private IEnumerable<Claim>? userClaims;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        owner = user.Identity.Name;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
    }

    private async Task Create()
    {
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            Console.WriteLine("about to create async");
            
            await postService.CreateAsync(new PostCreationDto(postTitle, postBody, owner));
            navMgr.NavigateTo("/Posts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}